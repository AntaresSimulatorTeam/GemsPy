# Generated from Expr.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,109,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,
        7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,3,
        13,71,8,13,1,14,4,14,74,8,14,11,14,12,14,75,1,14,1,14,4,14,80,8,
        14,11,14,12,14,81,3,14,84,8,14,1,15,1,15,1,16,1,16,5,16,90,8,16,
        10,16,12,16,93,9,16,1,17,1,17,1,17,1,17,1,17,3,17,100,8,17,1,18,
        1,18,1,18,1,18,1,19,1,19,1,19,1,19,0,0,20,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,0,25,0,27,0,29,12,31,13,33,14,35,
        15,37,16,39,17,1,0,3,1,0,48,57,3,0,65,90,95,95,97,122,3,0,9,10,13,
        13,32,32,112,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,43,1,0,0,0,5,45,
        1,0,0,0,7,47,1,0,0,0,9,49,1,0,0,0,11,51,1,0,0,0,13,53,1,0,0,0,15,
        55,1,0,0,0,17,57,1,0,0,0,19,59,1,0,0,0,21,61,1,0,0,0,23,64,1,0,0,
        0,25,66,1,0,0,0,27,70,1,0,0,0,29,73,1,0,0,0,31,85,1,0,0,0,33,87,
        1,0,0,0,35,99,1,0,0,0,37,101,1,0,0,0,39,105,1,0,0,0,41,42,5,46,0,
        0,42,2,1,0,0,0,43,44,5,45,0,0,44,4,1,0,0,0,45,46,5,40,0,0,46,6,1,
        0,0,0,47,48,5,41,0,0,48,8,1,0,0,0,49,50,5,47,0,0,50,10,1,0,0,0,51,
        52,5,42,0,0,52,12,1,0,0,0,53,54,5,43,0,0,54,14,1,0,0,0,55,56,5,91,
        0,0,56,16,1,0,0,0,57,58,5,93,0,0,58,18,1,0,0,0,59,60,5,44,0,0,60,
        20,1,0,0,0,61,62,5,46,0,0,62,63,5,46,0,0,63,22,1,0,0,0,64,65,7,0,
        0,0,65,24,1,0,0,0,66,67,7,1,0,0,67,26,1,0,0,0,68,71,3,25,12,0,69,
        71,3,23,11,0,70,68,1,0,0,0,70,69,1,0,0,0,71,28,1,0,0,0,72,74,3,23,
        11,0,73,72,1,0,0,0,74,75,1,0,0,0,75,73,1,0,0,0,75,76,1,0,0,0,76,
        83,1,0,0,0,77,79,5,46,0,0,78,80,3,23,11,0,79,78,1,0,0,0,80,81,1,
        0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,84,1,0,0,0,83,77,1,0,0,0,83,
        84,1,0,0,0,84,30,1,0,0,0,85,86,5,116,0,0,86,32,1,0,0,0,87,91,3,25,
        12,0,88,90,3,27,13,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,
        92,1,0,0,0,92,34,1,0,0,0,93,91,1,0,0,0,94,100,5,61,0,0,95,96,5,62,
        0,0,96,100,5,61,0,0,97,98,5,60,0,0,98,100,5,61,0,0,99,94,1,0,0,0,
        99,95,1,0,0,0,99,97,1,0,0,0,100,36,1,0,0,0,101,102,5,115,0,0,102,
        103,5,117,0,0,103,104,5,109,0,0,104,38,1,0,0,0,105,106,7,2,0,0,106,
        107,1,0,0,0,107,108,6,19,0,0,108,40,1,0,0,0,7,0,70,75,81,83,91,99,
        1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    NUMBER = 12
    TIME = 13
    IDENTIFIER = 14
    COMPARISON = 15
    TIME_SUM = 16
    WS = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'.'", "'-'", "'('", "')'", "'/'", "'*'", "'+'", "'['", "']'", 
            "','", "'..'", "'t'", "'sum'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "TIME", "IDENTIFIER", "COMPARISON", "TIME_SUM", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "DIGIT", "CHAR", "CHAR_OR_DIGIT", 
                  "NUMBER", "TIME", "IDENTIFIER", "COMPARISON", "TIME_SUM", 
                  "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


